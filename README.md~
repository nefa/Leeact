betbrain application using React.js and Re/Flux
==============================================

# Setup

In order to run the app, you must execute `npm install` to install the app's
dependencies.
To start developing, you run `gulp` to start the developing server; this will
start an express instance that will server the app on localhost:9000.

#### Testing on mobile devices

In order to test on a mobile device, you have to start the dev server
passing an additional argument: `gulp -h your_hostname_ip` and point your device's
browser to the local ip address(don't forget the port)


# Initialization process

Before the app renders, both BBWebApi and the Nomenclature
should be completely initialized.

There are two ways to bootstrap this cycle:

1. use `transitionTo` for the top-most component - App and
wait for the apis to initialize
2. use a flux cycle to initialize apis then let the store
trigger an update in the App component(that will render the <RouteHandle />)

#### TODO:

1. make shure the api's are initialized
2. add catch/error for the api's promises and act accordingly


# Bootstrap error handling

There are some issues that could arise from using promises when bootstrapping
the application, using promises.
If the code "inside" has errors, those errors will be completely opaque
so the developer won't see what's happening

#### TODO:

1. should catch the initialization process error and handle it some way


# Decorators

#### observable

*located inside src/client/decorators*

#### TODO:

1. remove ng-style docs
2. remove commented code
3. replace the symbol from the `var eventList = Symbol()` with a plain array
4. add shims(babel?) that will emulate `Symbol` on some browsers


# event-overview model/resource

#### TODO:

1. remove `this.activeBettingTypes` from the public interface
2. find the meaning and use of the `this.activeBettingTypes`


# event overview store

#### TODO:

1. do not expose the event's attributes(eventSportId, eventTypeId, etc)
2. expose only the event represented by that resource(event overview model,
   which name should change, btw)


# event odds store

**tl;dr some properties don't need to be added/computed for the store's data structure**

This store currently contains to many functions that can be ported
to some ui utils module. Things like labels, formatters, etc,
don't have anything to do with how the structure is being built
and don't affect its implementation/consistency/etc.
This module will eventually be used by the UI for various tasks:

* format odds
* label odds
* ...and so on


#### TODO:

1. identify common utils that don't need to be inside the store
2. move function/utils to a utils module
3. remove many of the odds props decorations to the ui


